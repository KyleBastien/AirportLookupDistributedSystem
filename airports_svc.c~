/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "airports.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <ctype.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif

static void
airportsprog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		struct coordinates get_aiports_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case get_aiports:
		_xdr_argument = (xdrproc_t) xdr_coordinates;
		_xdr_result = (xdrproc_t) xdr_readairports_ret;
		local = (char *(*)(char *, struct svc_req *)) get_aiports_1_svc;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

static const char filename[] = "airport-locations.txt";

// struct to store place (line in text file)
struct airport {
  char code[MAXLEN];
  char name[MAXLEN];
  char state[2];
  float latitude;
  float longitude;
};

typedef struct airport Airport;

char *ltrim(char *s)
{
  while(isspace(*s)) s++;
  return s;
}

// This function parses the line that is reas and stores data in the "place" struct
Airport *  parseLine(char * line){

  Airport *p = malloc(sizeof *p);
  int length = strlen(line);
  char * temp;

  strncpy(p->code, line+1, 3);  // code
  strncpy(p->code, ltrim(p->code), strlen(ltrim(p->code)));
  
  strncpy(p->name, line+19, length-19+3);   // state

  
  /*strncpy(temp, line+143, 10);
  p->latitude = atof(temp);     // latitiude

  strncpy(temp, line+153, 11);  // longitude
  p->longitude = atof(temp);
  */
  // Uncomment code below if you want to see the data being printed out
  
  //printf(p->code);
	printf(p->name);
	/*	printf("%.6f",p->latitude);
	printf("%.6f\n",p->longitude);
  */
  return p;

};

// Function to read file airport-locations.txt
void readFile() {
  FILE *file = fopen(filename, "r");
  char line[MAXLEN]; //temp storage for line
  if (file != NULL) {
	fgets(line, sizeof line, file); // disregard first line
	while (fgets(line, sizeof line, file) != NULL) { //read line
	  // parse line and get data in struct
	  Airport *a = parseLine(line);
	  break;
	  // TODO: Use Place struct store in datastructure

	}
	fclose(file);
  }
}



int
main (int argc, char **argv)
{
	register SVCXPRT *transp;

	pmap_unset (AIRPORTSPROG, AIRPORTS_VERS);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, AIRPORTSPROG, AIRPORTS_VERS, airportsprog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (AIRPORTSPROG, AIRPORTS_VERS, udp).");
		exit(1);
	}

	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create tcp service.");
		exit(1);
	}
	if (!svc_register(transp, AIRPORTSPROG, AIRPORTS_VERS, airportsprog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (AIRPORTSPROG, AIRPORTS_VERS, tcp).");
		exit(1);
	}

	readFile();
	//svc_run ();
	//fprintf (stderr, "%s", "svc_run returned");
	exit (1);
	/* NOTREACHED */
}
